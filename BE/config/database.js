/**
 * C·∫•u h√¨nh k·∫øt n·ªëi PostgreSQL
 * File n√†y x·ª≠ l√Ω vi·ªác k·∫øt n·ªëi ƒë·∫øn database PostgreSQL s·ª≠ d·ª•ng Sequelize ORM
 */

const { Sequelize } = require('sequelize'); // Import Sequelize t·ª´ th∆∞ vi·ªán sequelize

// T·∫°o Sequelize instance
const sequelize = new Sequelize(
  process.env.DB_NAME || 'electronics_store', // T√™n database (l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh)
  process.env.DB_USER || 'postgres', // Username database (l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh)
  process.env.DB_PASSWORD || '1234', // Password database (l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh)
  {
    host: process.env.DB_HOST || 'localhost', // Host database (l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh)
    port: process.env.DB_PORT || 5432, // Port database (l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh)
    dialect: 'postgres', // Lo·∫°i database (PostgreSQL)
    logging: process.env.NODE_ENV === 'development' ? console.log : false, // Ch·ªâ log SQL trong development
    
    // Connection pool configuration
    pool: {
      max: 5, // S·ªë connection t·ªëi ƒëa trong pool (t·ªëi ƒëa 5 k·∫øt n·ªëi ƒë·ªìng th·ªùi)
      min: 0, // S·ªë connection t·ªëi thi·ªÉu trong pool (c√≥ th·ªÉ ƒë√≥ng h·∫øt khi kh√¥ng d√πng)
      acquire: 30000, // Th·ªùi gian t·ªëi ƒëa ƒë·ªÉ acquire connection (30 gi√¢y)
      idle: 10000 // Th·ªùi gian connection c√≥ th·ªÉ idle tr∆∞·ªõc khi b·ªã ƒë√≥ng (10 gi√¢y)
    },
    
    // Timezone configuration
    timezone: '+07:00', // Timezone Vi·ªát Nam (UTC+7)
    
    // Define configuration
    define: {
      timestamps: true, // T·ª± ƒë·ªông th√™m createdAt v√† updatedAt v√†o t·∫•t c·∫£ tables
      underscored: true, // S·ª≠ d·ª•ng snake_case cho column names (user_id thay v√¨ userId)
      freezeTableName: true // Kh√¥ng th√™m 's' v√†o cu·ªëi table name (user thay v√¨ users)
    }
  }
);

const connectDB = async () => {
  try {
    // Test k·∫øt n·ªëi database
    await sequelize.authenticate(); // Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn database
    console.log(`‚úÖ PostgreSQL ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng: ${process.env.DB_HOST}:${process.env.DB_PORT}/${process.env.DB_NAME}`); // In th√¥ng b√°o th√†nh c√¥ng
    
    // Sync database (t·∫°o tables n·∫øu ch∆∞a c√≥)
    if (process.env.NODE_ENV === 'development') {
      await sequelize.sync({ alter: true }); // alter: true ƒë·ªÉ c·∫≠p nh·∫≠t schema trong development
      console.log('üîÑ Database ƒë√£ ƒë∆∞·ª£c sync'); // In th√¥ng b√°o sync th√†nh c√¥ng
    } else {
      await sequelize.sync(); // Ch·ªâ t·∫°o tables n·∫øu ch∆∞a c√≥ (production)
    }
    
    // X·ª≠ l√Ω c√°c s·ª± ki·ªán k·∫øt n·ªëi
    sequelize.addHook('afterConnect', (connection) => {
      console.log('üîó Database connection established'); // In th√¥ng b√°o khi c√≥ k·∫øt n·ªëi m·ªõi
    }); // Th√™m hook ƒë·ªÉ x·ª≠ l√Ω khi c√≥ k·∫øt n·ªëi m·ªõi
    
    // X·ª≠ l√Ω khi ·ª©ng d·ª•ng t·∫Øt
    process.on('SIGINT', async () => {
      await sequelize.close(); // ƒê√≥ng k·∫øt n·ªëi database
      console.log('üîå Database connection ƒë√£ ƒë√≥ng do ·ª©ng d·ª•ng t·∫Øt'); // In th√¥ng b√°o ƒë√≥ng k·∫øt n·ªëi
      process.exit(0); // Tho√°t process v·ªõi m√£ th√†nh c√¥ng
    }); // X·ª≠ l√Ω khi nh·∫≠n t√≠n hi·ªáu SIGINT (Ctrl+C)
    
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi PostgreSQL:', error.message); // In l·ªói k·∫øt n·ªëi
    process.exit(1); // Tho√°t process v·ªõi m√£ l·ªói
  }
};

// Export sequelize instance v√† connectDB function
module.exports = { sequelize, connectDB }; // Export ƒë·ªÉ s·ª≠ d·ª•ng ·ªü file kh√°c 