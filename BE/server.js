/**
 * Server ch√≠nh - Backend API cho trang web b√°n ƒë·ªì ƒëi·ªán t·ª≠
 * S·ª≠ d·ª•ng Express.js v√† PostgreSQL v·ªõi Sequelize ORM
 */

const express = require('express'); // Import th∆∞ vi·ªán Express.js ƒë·ªÉ t·∫°o web server
const cors = require('cors'); // Import middleware cho ph√©p truy c·∫≠p t·ª´ domain kh√°c (Cross-Origin Resource Sharing)
const helmet = require('helmet'); // Import middleware b·∫£o m·∫≠t cho HTTP headers
const rateLimit = require('express-rate-limit'); // Import middleware gi·ªõi h·∫°n s·ªë l∆∞·ª£ng request
const path = require('path'); // Import module x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n file
require('dotenv').config(); // Load c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env

// Import database connection
const { connectDB } = require('./config/database'); // Import h√†m k·∫øt n·ªëi database

// Import models ƒë·ªÉ ƒë·∫£m b·∫£o associations ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
require('./models/index'); // Load t·∫•t c·∫£ models ƒë·ªÉ ƒë·∫£m b·∫£o c√°c m·ªëi quan h·ªá ƒë∆∞·ª£c thi·∫øt l·∫≠p

// Import routes
const authRoutes = require('./routes/auth'); // Import routes x·ª≠ l√Ω authentication (ƒëƒÉng nh·∫≠p, ƒëƒÉng k√Ω)
const productRoutes = require('./routes/products'); // Import routes x·ª≠ l√Ω s·∫£n ph·∫©m
const orderRoutes = require('./routes/orders'); // Import routes x·ª≠ l√Ω ƒë∆°n h√†ng
const userRoutes = require('./routes/users'); // Import routes x·ª≠ l√Ω ng∆∞·ªùi d√πng

// Import error handler middleware
const { errorHandler } = require('./middleware/errorHandler'); // Import middleware x·ª≠ l√Ω l·ªói

// Kh·ªüi t·∫°o Express app
const app = express(); // T·∫°o instance c·ªßa Express application

// K·∫øt n·ªëi database
connectDB(); // G·ªçi h√†m k·∫øt n·ªëi ƒë·∫øn PostgreSQL database

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"], // Ch·ªâ cho ph√©p t·∫£i t√†i nguy√™n t·ª´ c√πng domain
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"], // Cho ph√©p CSS t·ª´ Google Fonts
      fontSrc: ["'self'", "https://fonts.gstatic.com"], // Cho ph√©p font t·ª´ Google Fonts
      imgSrc: ["'self'", "data:", "https:"], // Cho ph√©p h√¨nh ·∫£nh t·ª´ HTTPS v√† data URL
      scriptSrc: ["'self'"], // Ch·ªâ cho ph√©p JavaScript t·ª´ c√πng domain
    },
  },
})); // Thi·∫øt l·∫≠p c√°c header b·∫£o m·∫≠t cho ·ª©ng d·ª•ng

// CORS configuration
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:5173', // Cho ph√©p frontend truy c·∫≠p t·ª´ URL n√†y
  credentials: true, // Cho ph√©p g·ª≠i cookies v√† authentication headers
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'], // Cho ph√©p c√°c HTTP methods n√†y
  allowedHeaders: ['Content-Type', 'Authorization'] // Cho ph√©p c√°c headers n√†y
})); // Thi·∫øt l·∫≠p CORS ƒë·ªÉ frontend c√≥ th·ªÉ g·ªçi API

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 ph√∫t - kho·∫£ng th·ªùi gian t√≠nh to√°n
  max: 100, // Gi·ªõi h·∫°n 100 requests per windowMs - t·ªëi ƒëa 100 request trong 15 ph√∫t
  message: {
    error: 'Qu√° nhi·ªÅu requests t·ª´ IP n√†y, vui l√≤ng th·ª≠ l·∫°i sau 15 ph√∫t'
  }, // Th√¥ng b√°o l·ªói khi v∆∞·ª£t qu√° gi·ªõi h·∫°n
  standardHeaders: true, // Th√™m headers chu·∫©n v·ªÅ rate limit
  legacyHeaders: false, // Kh√¥ng s·ª≠ d·ª•ng headers c≈©
}); // T·∫°o middleware gi·ªõi h·∫°n s·ªë l∆∞·ª£ng request ƒë·ªÉ tr√°nh spam

app.use('/api/', limiter); // √Åp d·ª•ng rate limiting cho t·∫•t c·∫£ routes b·∫Øt ƒë·∫ßu b·∫±ng /api/

// Body parser middleware
app.use(express.json({ limit: '10mb' })); // Parse JSON body v·ªõi gi·ªõi h·∫°n 10MB
app.use(express.urlencoded({ extended: true, limit: '10mb' })); // Parse URL-encoded body v·ªõi gi·ªõi h·∫°n 10MB

// Static files
app.use('/uploads', express.static(path.join(__dirname, 'uploads'))); // Ph·ª•c v·ª• file tƒ©nh t·ª´ th∆∞ m·ª•c uploads

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({
    success: true,
    message: 'Server ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
    timestamp: new Date().toISOString(), // Th·ªùi gian hi·ªán t·∫°i
    environment: process.env.NODE_ENV || 'development' // M√¥i tr∆∞·ªùng hi·ªán t·∫°i
  });
}); // Route ki·ªÉm tra tr·∫°ng th√°i server

// API Routes
app.use('/api/auth', authRoutes); // ƒêƒÉng k√Ω routes authentication v·ªõi prefix /api/auth
app.use('/api/products', productRoutes); // ƒêƒÉng k√Ω routes s·∫£n ph·∫©m v·ªõi prefix /api/products
app.use('/api/orders', orderRoutes); // ƒêƒÉng k√Ω routes ƒë∆°n h√†ng v·ªõi prefix /api/orders
app.use('/api/users', userRoutes); // ƒêƒÉng k√Ω routes ng∆∞·ªùi d√πng v·ªõi prefix /api/users

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: `Kh√¥ng t√¨m th·∫•y route: ${req.originalUrl}` // URL m√† user ƒëang c·ªë truy c·∫≠p
  });
}); // X·ª≠ l√Ω khi kh√¥ng t√¨m th·∫•y route n√†o kh·ªõp

// Error handler middleware (ph·∫£i ƒë·∫∑t cu·ªëi c√πng)
app.use(errorHandler); // Middleware x·ª≠ l√Ω t·∫•t c·∫£ l·ªói trong ·ª©ng d·ª•ng

// Kh·ªüi ƒë·ªông server
const PORT = process.env.PORT || 3000; // L·∫•y port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c m·∫∑c ƒë·ªãnh l√† 3000

const server = app.listen(PORT, () => {
  console.log(`üöÄ Server ƒëang ch·∫°y tr√™n port ${PORT}`); // In th√¥ng b√°o server ƒë√£ kh·ªüi ƒë·ªông
  console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`); // In m√¥i tr∆∞·ªùng hi·ªán t·∫°i
  console.log(`üîó API Base URL: http://localhost:${PORT}/api`); // In URL c∆° s·ªü c·ªßa API
  console.log(`üìÅ Uploads: http://localhost:${PORT}/uploads`); // In URL ƒë·ªÉ truy c·∫≠p file upload
}); // Kh·ªüi ƒë·ªông server v√† l·∫Øng nghe tr√™n port ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë SIGTERM received, shutting down gracefully'); // Th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu t·∫Øt server
  server.close(() => {
    console.log('üîå Server ƒë√£ ƒë√≥ng'); // Th√¥ng b√°o server ƒë√£ ƒë√≥ng th√†nh c√¥ng
    process.exit(0); // Tho√°t process v·ªõi m√£ th√†nh c√¥ng
  });
}); // X·ª≠ l√Ω khi nh·∫≠n t√≠n hi·ªáu SIGTERM (t·∫Øt server t·ª´ b√™n ngo√†i)

process.on('SIGINT', () => {
  console.log('üõë SIGINT received, shutting down gracefully'); // Th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu Ctrl+C
  server.close(() => {
    console.log('üîå Server ƒë√£ ƒë√≥ng'); // Th√¥ng b√°o server ƒë√£ ƒë√≥ng th√†nh c√¥ng
    process.exit(0); // Tho√°t process v·ªõi m√£ th√†nh c√¥ng
  });
}); // X·ª≠ l√Ω khi nh·∫≠n t√≠n hi·ªáu SIGINT (Ctrl+C)

// Handle unhandled promise rejections
process.on('unhandledRejection', (err, promise) => {
  console.error('‚ùå Unhandled Rejection:', err); // In l·ªói promise b·ªã reject m√† kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω
  server.close(() => {
    process.exit(1); // Tho√°t process v·ªõi m√£ l·ªói
  });
}); // X·ª≠ l√Ω khi c√≥ promise b·ªã reject m√† kh√¥ng ƒë∆∞·ª£c catch

module.exports = app; // Export app ƒë·ªÉ c√≥ th·ªÉ test ho·∫∑c s·ª≠ d·ª•ng ·ªü file kh√°c 