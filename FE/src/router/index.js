/**
 * Vue Router configuration
 * ƒê·ªãnh nghƒ©a c√°c route v√† navigation guards
 */

import { createRouter, createWebHistory } from 'vue-router'
import { useAuthStore } from '@/stores/auth'

// Import views (lazy loading)
const Home = () => import('@/views/Home.vue')
const Products = () => import('@/views/Products.vue')
const ProductDetail = () => import('@/views/ProductDetail.vue')
const Cart = () => import('@/views/Cart.vue')
const Checkout = () => import('@/views/Checkout.vue')
const Login = () => import('@/views/auth/Login.vue')
const Register = () => import('@/views/auth/Register.vue')
const Profile = () => import('@/views/auth/Profile.vue')
const Orders = () => import('@/views/Orders.vue')
const OrderDetail = () => import('@/views/OrderDetail.vue')
const NotFound = () => import('@/views/NotFound.vue')

// Route definitions
const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home,
    meta: {
      title: 'Trang ch·ªß - Electronics Store',
      description: 'Trang web b√°n ƒë·ªì ƒëi·ªán t·ª≠ uy t√≠n v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao'
    }
  },
  
  {
    path: '/products',
    name: 'Products',
    component: Products,
    meta: {
      title: 'S·∫£n ph·∫©m - Electronics Store',
      description: 'Kh√°m ph√° ƒëa d·∫°ng s·∫£n ph·∫©m ƒëi·ªán t·ª≠ ch·∫•t l∆∞·ª£ng cao'
    }
  },
  
  {
    path: '/products/:id',
    name: 'ProductDetail',
    component: ProductDetail,
    props: true,
    meta: {
      title: 'Chi ti·∫øt s·∫£n ph·∫©m - Electronics Store',
      description: 'Th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m'
    }
  },
  
  {
    path: '/products/slug/:slug',
    name: 'ProductDetailBySlug',
    component: ProductDetail,
    props: true,
    meta: {
      title: 'Chi ti·∫øt s·∫£n ph·∫©m - Electronics Store',
      description: 'Th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m'
    }
  },
  
  {
    path: '/cart',
    name: 'Cart',
    component: Cart,
    meta: {
      title: 'Gi·ªè h√†ng - Electronics Store',
      description: 'Xem v√† qu·∫£n l√Ω gi·ªè h√†ng c·ªßa b·∫°n',
      requiresAuth: false
    }
  },
  
  {
    path: '/checkout',
    name: 'Checkout',
    component: Checkout,
    meta: {
      title: 'Thanh to√°n - Electronics Store',
      description: 'Ho√†n t·∫•t ƒë∆°n h√†ng c·ªßa b·∫°n',
      requiresAuth: true
    }
  },
  
  {
    path: '/login',
    name: 'Login',
    component: Login,
    meta: {
      title: 'ƒêƒÉng nh·∫≠p - Electronics Store',
      description: 'ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n',
      guestOnly: true
    }
  },
  
  {
    path: '/register',
    name: 'Register',
    component: Register,
    meta: {
      title: 'ƒêƒÉng k√Ω - Electronics Store',
      description: 'T·∫°o t√†i kho·∫£n m·ªõi',
      guestOnly: true
    }
  },
  
  {
    path: '/profile',
    name: 'Profile',
    component: Profile,
    meta: {
      title: 'H·ªì s∆° c√° nh√¢n - Electronics Store',
      description: 'Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n',
      requiresAuth: true
    }
  },
  
  {
    path: '/orders',
    name: 'Orders',
    component: Orders,
    meta: {
      title: 'ƒê∆°n h√†ng c·ªßa t√¥i - Electronics Store',
      description: 'Xem l·ªãch s·ª≠ ƒë∆°n h√†ng',
      requiresAuth: true
    }
  },
  
  {
    path: '/orders/:id',
    name: 'OrderDetail',
    component: OrderDetail,
    props: true,
    meta: {
      title: 'Chi ti·∫øt ƒë∆°n h√†ng - Electronics Store',
      description: 'Th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng',
      requiresAuth: true
    }
  },
  
  // 404 route - ph·∫£i ƒë·∫∑t cu·ªëi c√πng
  {
    path: '/:pathMatch(.*)*',
    name: 'NotFound',
    component: NotFound,
    meta: {
      title: 'Kh√¥ng t√¨m th·∫•y trang - Electronics Store',
      description: 'Trang b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i'
    }
  }
]

// Create router instance
const router = createRouter({
  history: createWebHistory(),
  routes,
  
  // Scroll behavior
  scrollBehavior(to, from, savedPosition) {
    // N·∫øu c√≥ saved position (back/forward navigation)
    if (savedPosition) {
      return savedPosition
    }
    
    // N·∫øu c√≥ hash trong URL
    if (to.hash) {
      return {
        el: to.hash,
        behavior: 'smooth'
      }
    }
    
    // M·∫∑c ƒë·ªãnh scroll to top
    return { top: 0 }
  }
})

/**
 * Navigation Guards
 */

// Global before each guard
router.beforeEach(async (to, from, next) => {
  console.log(`üîÑ Route change: ${from.path} ‚Üí ${to.path}`)
  
  // Update document title
  if (to.meta.title) {
    document.title = to.meta.title
  }
  
  // Update meta description
  if (to.meta.description) {
    const metaDescription = document.querySelector('meta[name="description"]')
    if (metaDescription) {
      metaDescription.setAttribute('content', to.meta.description)
    }
  }
  
  // Get auth store
  const authStore = useAuthStore()
  
  // Check if route requires authentication
  if (to.meta.requiresAuth && !authStore.isAuthenticated) {
    console.log('üîí Route requires auth, redirecting to login')
    next({
      name: 'Login',
      query: { redirect: to.fullPath }
    })
    return
  }
  
  // Check if route is guest only (not for authenticated users)
  if (to.meta.guestOnly && authStore.isAuthenticated) {
    console.log('üë§ Guest only route, redirecting to home')
    next({ name: 'Home' })
    return
  }
  
  // Continue navigation
  next()
})

// Global after each guard
router.afterEach((to, from) => {
  console.log(`‚úÖ Route change completed: ${from.path} ‚Üí ${to.path}`)
  
  // Track page view (c√≥ th·ªÉ t√≠ch h·ª£p Google Analytics)
  if (typeof gtag !== 'undefined') {
    gtag('config', 'GA_MEASUREMENT_ID', {
      page_path: to.path
    })
  }
})

// Error handling
router.onError((error) => {
  console.error('‚ùå Router error:', error)
  
  // Redirect to 404 if component fails to load
  if (error.name === 'ChunkLoadFailedError') {
    router.push({ name: 'NotFound' })
  }
})

export default router 