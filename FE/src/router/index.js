/**
 * Vue Router configuration
 * ƒê·ªãnh nghƒ©a c√°c route v√† navigation guards
 */

import { createRouter, createWebHistory } from 'vue-router' // Import c√°c h√†m t·ª´ Vue Router
import { useAuthStore } from '@/stores/auth' // Import Pinia store ƒë·ªÉ qu·∫£n l√Ω authentication

// Import views (lazy loading)
const Home = () => import('@/views/Home.vue') // Lazy load component Home
const Products = () => import('@/views/Products.vue') // Lazy load component Products
const ProductDetail = () => import('@/views/ProductDetail.vue') // Lazy load component ProductDetail
const Cart = () => import('@/views/Cart.vue') // Lazy load component Cart
const Checkout = () => import('@/views/Checkout.vue') // Lazy load component Checkout
const Login = () => import('@/views/auth/Login.vue') // Lazy load component Login
const Register = () => import('@/views/auth/Register.vue') // Lazy load component Register
const Profile = () => import('@/views/auth/Profile.vue') // Lazy load component Profile
const Orders = () => import('@/views/Orders.vue') // Lazy load component Orders
const OrderDetail = () => import('@/views/OrderDetail.vue') // Lazy load component OrderDetail
const NotFound = () => import('@/views/NotFound.vue') // Lazy load component NotFound

// Route definitions
const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home,
    meta: {
      title: 'Trang ch·ªß - Electronics Store',
      description: 'Trang web b√°n ƒë·ªì ƒëi·ªán t·ª≠ uy t√≠n v·ªõi ƒëa d·∫°ng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao'
    }
  },
  
  {
    path: '/products',
    name: 'Products',
    component: Products,
    meta: {
      title: 'S·∫£n ph·∫©m - Electronics Store',
      description: 'Kh√°m ph√° ƒëa d·∫°ng s·∫£n ph·∫©m ƒëi·ªán t·ª≠ ch·∫•t l∆∞·ª£ng cao'
    }
  },
  
  {
    path: '/products/:id',
    name: 'ProductDetail',
    component: ProductDetail,
    props: true,
    meta: {
      title: 'Chi ti·∫øt s·∫£n ph·∫©m - Electronics Store',
      description: 'Th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m'
    }
  },
  
  {
    path: '/products/slug/:slug',
    name: 'ProductDetailBySlug',
    component: ProductDetail,
    props: true,
    meta: {
      title: 'Chi ti·∫øt s·∫£n ph·∫©m - Electronics Store',
      description: 'Th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m'
    }
  },
  
  {
    path: '/cart',
    name: 'Cart',
    component: Cart,
    meta: {
      title: 'Gi·ªè h√†ng - Electronics Store',
      description: 'Xem v√† qu·∫£n l√Ω gi·ªè h√†ng c·ªßa b·∫°n',
      requiresAuth: false
    }
  },
  
  {
    path: '/checkout',
    name: 'Checkout',
    component: Checkout,
    meta: {
      title: 'Thanh to√°n - Electronics Store',
      description: 'Ho√†n t·∫•t ƒë∆°n h√†ng c·ªßa b·∫°n',
      requiresAuth: true
    }
  },
  
  {
    path: '/login',
    name: 'Login',
    component: Login,
    meta: {
      title: 'ƒêƒÉng nh·∫≠p - Electronics Store',
      description: 'ƒêƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n',
      guestOnly: true
    }
  },
  
  {
    path: '/register',
    name: 'Register',
    component: Register,
    meta: {
      title: 'ƒêƒÉng k√Ω - Electronics Store',
      description: 'T·∫°o t√†i kho·∫£n m·ªõi',
      guestOnly: true
    }
  },
  
  {
    path: '/profile',
    name: 'Profile',
    component: Profile,
    meta: {
      title: 'H·ªì s∆° c√° nh√¢n - Electronics Store',
      description: 'Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n',
      requiresAuth: true
    }
  },
  
  {
    path: '/orders',
    name: 'Orders',
    component: Orders,
    meta: {
      title: 'ƒê∆°n h√†ng c·ªßa t√¥i - Electronics Store',
      description: 'Xem l·ªãch s·ª≠ ƒë∆°n h√†ng',
      requiresAuth: true
    }
  },
  
  {
    path: '/orders/:id',
    name: 'OrderDetail',
    component: OrderDetail,
    props: true,
    meta: {
      title: 'Chi ti·∫øt ƒë∆°n h√†ng - Electronics Store',
      description: 'Th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng',
      requiresAuth: true
    }
  },
  
  // 404 route - ph·∫£i ƒë·∫∑t cu·ªëi c√πng
  {
    path: '/:pathMatch(.*)*',
    name: 'NotFound',
    component: NotFound,
    meta: {
      title: 'Kh√¥ng t√¨m th·∫•y trang - Electronics Store',
      description: 'Trang b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i'
    }
  }
]

// Create router instance
const router = createRouter({
  history: createWebHistory(), // S·ª≠ d·ª•ng HTML5 History API
  routes, // M·∫£ng routes ƒë√£ ƒë·ªãnh nghƒ©a
  
  // Scroll behavior
  scrollBehavior(to, from, savedPosition) {
    // N·∫øu c√≥ saved position (back/forward navigation)
    if (savedPosition) {
      return savedPosition // Tr·ªü v·ªÅ v·ªã tr√≠ scroll c≈©
    }
    
    // N·∫øu c√≥ hash trong URL
    if (to.hash) {
      return {
        el: to.hash, // Element c√≥ id tr√πng v·ªõi hash
        behavior: 'smooth' // Scroll m∆∞·ª£t m√†
      }
    }
    
    // M·∫∑c ƒë·ªãnh scroll to top
    return { top: 0 } // Scroll l√™n ƒë·∫ßu trang
  }
})

/**
 * Navigation Guards
 */

// Global before each guard
router.beforeEach(async (to, from, next) => {
  console.log(`üîÑ Route change: ${from.path} ‚Üí ${to.path}`) // Log thay ƒë·ªïi route
  
  // Update document title
  if (to.meta.title) {
    document.title = to.meta.title // C·∫≠p nh·∫≠t ti√™u ƒë·ªÅ trang
  }
  
  // Update meta description
  if (to.meta.description) {
    const metaDescription = document.querySelector('meta[name="description"]') // T√¨m meta description
    if (metaDescription) {
      metaDescription.setAttribute('content', to.meta.description) // C·∫≠p nh·∫≠t n·ªôi dung meta description
    }
  }
  
  // Get auth store
  const authStore = useAuthStore() // L·∫•y instance c·ªßa auth store
  
  // Check if route requires authentication
  if (to.meta.requiresAuth && !authStore.isAuthenticated) {
    console.log('üîí Route requires auth, redirecting to login') // Log y√™u c·∫ßu ƒëƒÉng nh·∫≠p
    next({
      name: 'Login', // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      query: { redirect: to.fullPath } // L∆∞u URL hi·ªán t·∫°i ƒë·ªÉ redirect sau khi ƒëƒÉng nh·∫≠p
    })
    return
  }
  
  // Check if route is guest only (not for authenticated users)
  if (to.meta.guestOnly && authStore.isAuthenticated) {
    console.log('üë§ Guest only route, redirecting to home') // Log route ch·ªâ cho kh√°ch
    next({ name: 'Home' }) // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
    return
  }
  
  // Continue navigation
  next() // Cho ph√©p ƒëi·ªÅu h∆∞·ªõng ti·∫øp
})

// Global after each guard
router.afterEach((to, from) => {
  console.log(`‚úÖ Route change completed: ${from.path} ‚Üí ${to.path}`) // Log ho√†n th√†nh thay ƒë·ªïi route
  
  // Track page view (c√≥ th·ªÉ t√≠ch h·ª£p Google Analytics)
  if (typeof gtag !== 'undefined') {
    gtag('config', 'GA_MEASUREMENT_ID', {
      page_path: to.path // G·ª≠i page path ƒë·∫øn Google Analytics
    })
  }
})

// Error handling
router.onError((error) => {
  console.error('‚ùå Router error:', error) // Log l·ªói router
  
  // Redirect to 404 if component fails to load
  if (error.name === 'ChunkLoadFailedError') {
    router.push({ name: 'NotFound' }) // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang 404 n·∫øu component load th·∫•t b·∫°i
  }
})

export default router 